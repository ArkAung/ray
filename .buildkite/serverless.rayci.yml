group: serverless tests
steps:
  # builds
  - name: serverlessbuild
    wanda: ci/docker/serverless.build.wanda.yaml
    depends_on: oss-ci-base_build

  # tests
  - label: ":serverless: serverless: python tests"
    tags: python
    instance_type: medium
    commands:
      - bazel run //ci/ray_ci:test_in_docker -- //python/ray/tests/... serverless 
        --parallelism-per-worker 3
        --except-tags manual,kuberay_operator,spark_plugin_tests
    depends_on: serverlessbuild
    job_env: forge

  - label: ":serverless: serverless: spark tests"
    tags: python
    instance_type: medium
    commands:
      - bazel run //ci/ray_ci:test_in_docker -- //python/ray/tests/... serverless 
        --build-type debug
        --test-env=RAY_ON_SPARK_BACKGROUND_JOB_STARTUP_WAIT=1
        --test-env=RAY_ON_SPARK_RAY_WORKER_NODE_STARTUP_INTERVAL=5
        --parallelism-per-worker 3
        --only-tags spark_plugin_tests
        --except-tags kubernetes 
    depends_on: serverlessbuild
    job_env: forge

  - label: ":serverless: serverless: ml tests"
    tags: python
    instance_type: medium
    commands:
      - bazel run //ci/ray_ci:test_in_docker -- //python/ray/util/dask/... serverless
        --build-name mlbuild
        --parallelism-per-worker 2
        --only-tags client
        --test-env=RAY_CLIENT_MODE=1
    depends_on: mlbuild
    job_env: forge

  - label: ":serverless: serverless: operator tests"
    instance_type: medium
    commands:
      - ./ci/env/install-minimal.sh 3.8
      - PYTHON=3.8 ./ci/env/install-dependencies.sh
      # Specifying above somehow messes up the Ray install.
      # Uninstall and re-install Ray so that we can use Ray Client.
      # (Remove thirdparty_files to sidestep an issue with psutil.)
      - pip uninstall -y ray && rm -rf /ray/python/ray/thirdparty_files
      - pip install -e /ray/python
      - echo "--- Setting up local kind cluster."
      - ./ci/k8s/prep-k8s-environment.sh
      - echo "--- Building py38-cpu Ray image for the test."
      - LINUX_WHEELS=1 ./ci/ci.sh build
      - pip install -q docker
      - python ci/build/build-docker-images.py --py-versions py38 --device-types cpu --build-type LOCAL --build-base
      # Tag the image built in the last step. We want to be sure to distinguish the image from the real Ray nightly.
      - docker tag rayproject/ray:nightly-py38-cpu ray-ci:kuberay-test
      # Load the image into the kind node
      - kind load docker-image ray-ci:kuberay-test
      - echo "--- Setting up KubeRay operator."
      - python python/ray/tests/kuberay/setup/setup_kuberay.py
      - ./ci/env/env_info.sh
      - echo "--- Running the test."
      - bazel test --config=ci $(./ci/run/bazel_export_options)
        --test_tag_filters=kuberay_operator
        --test_env=RAY_IMAGE=docker.io/library/ray-ci:kuberay-test
        --test_env=PULL_POLICY=IfNotPresent
        --test_env=KUBECONFIG=/root/.kube/config
        python/ray/tests/...
    depends_on: oss-ci-base_build
    job_env: oss-ci-base_build

  - label: ":serverless: serverless: flaky tests"
    tags: python
    instance_type: medium
    soft_fail: true
    commands:
      - bazel run //ci/ray_ci:test_in_docker -- //... serverless --run-flaky-tests  --parallelism-per-worker 3
    depends_on: serverlessbuild
    job_env: forge
